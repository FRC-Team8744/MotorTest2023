// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;

/**
 *
 */
public class MotorSub extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax motorControllerSpin1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private RelativeEncoder m_encoder;
    private SparkMaxPIDController m_pidController;
    public double kP, kI, kD, kIz, kFF, kMaxOutput, kMinOutput, maxVel, minVel, maxAcc, allowedErr;

    /**
    *
    */
    public MotorSub() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
motorControllerSpin1 = new CANSparkMax(23, MotorType.kBrushless);
 
 motorControllerSpin1.restoreFactoryDefaults();  
motorControllerSpin1.setInverted(false);
motorControllerSpin1.setIdleMode(IdleMode.kBrake);
motorControllerSpin1.burnFlash();
  


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    motorControllerSpin1.setSmartCurrentLimit(20);
    m_encoder = motorControllerSpin1.getEncoder();
    m_pidController = motorControllerSpin1.getPIDController();

    // PID coefficients (Disable PID)
    kP = 0; 
    kI = 0;
    kD = 0; 
    kIz = 0; 
    kFF = 0; 
    kMaxOutput = 1; 
    kMinOutput = -1;

    // Get factory default values
    // kP = m_pidController.getP();
    // kI = m_pidController.getI();
    // kD = m_pidController.getD();
    // kIz = m_pidController.getIZone();
    // kFF = m_pidController.getFF();
    // kMaxOutput = m_pidController.getOutputMax();
    // kMinOutput = m_pidController.getOutputMin();

    // set PID coefficients
    m_pidController.setP(kP);
    m_pidController.setI(kI);
    m_pidController.setD(kD);
    m_pidController.setIZone(kIz);
    m_pidController.setFF(kFF);
    m_pidController.setOutputRange(kMinOutput, kMaxOutput);

    // display PID coefficients on SmartDashboard
    SmartDashboard.putNumber("P Gain", kP);
    SmartDashboard.putNumber("I Gain", kI);
    SmartDashboard.putNumber("D Gain", kD);
    SmartDashboard.putNumber("I Zone", kIz);
    SmartDashboard.putNumber("Feed Forward", kFF);
    SmartDashboard.putNumber("Max Output", kMaxOutput);
    SmartDashboard.putNumber("Min Output", kMinOutput);
    // SmartDashboard.putNumber("Set Rotations", 0);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double busVoltage = motorControllerSpin1.getBusVoltage();
        double current = motorControllerSpin1.getOutputCurrent();
        double appliedOut = motorControllerSpin1.getAppliedOutput();
        double temperature = motorControllerSpin1.getMotorTemperature();
    
        // Open SmartDashboard when your program is running to see the values
        SmartDashboard.putNumber("Bus Voltage", busVoltage);
        SmartDashboard.putNumber("Current", current);
        SmartDashboard.putNumber("Applied Output", appliedOut);
        SmartDashboard.putNumber("Motor Temperature", temperature);
        SmartDashboard.putNumber("Encoder Position (revs)", m_encoder.getPosition());
        SmartDashboard.putNumber("Encoder Velocity (RPM)", m_encoder.getVelocity());

        // read PID coefficients from SmartDashboard
        double p = SmartDashboard.getNumber("P Gain", 0);
        double i = SmartDashboard.getNumber("I Gain", 0);
        double d = SmartDashboard.getNumber("D Gain", 0);
        double iz = SmartDashboard.getNumber("I Zone", 0);
        double ff = SmartDashboard.getNumber("Feed Forward", 0);
        double max = SmartDashboard.getNumber("Max Output", 0);
        double min = SmartDashboard.getNumber("Min Output", 0);
        // double rotations = SmartDashboard.getNumber("Set Rotations", 0);

        // if PID coefficients on SmartDashboard have changed, write new values to controller
        if((p != kP)) { m_pidController.setP(p); kP = p; }
        if((i != kI)) { m_pidController.setI(i); kI = i; }
        if((d != kD)) { m_pidController.setD(d); kD = d; }
        if((iz != kIz)) { m_pidController.setIZone(iz); kIz = iz; }
        if((ff != kFF)) { m_pidController.setFF(ff); kFF = ff; }
        if((max != kMaxOutput) || (min != kMinOutput)) { 
            m_pidController.setOutputRange(min, max); 
            kMinOutput = min; kMaxOutput = max; 
        }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void spin(double speed) {
        // DISABLE PID
        // PID coefficients
        // kP = 0; 
        // kI = 0;
        // kD = 0; 
        // kIz = 0; 
        // kFF = 0; 
        // kMaxOutput = 1; 
        // kMinOutput = -1;

        // // set PID coefficients
        // m_pidController.setP(kP);
        // m_pidController.setI(kI);
        // m_pidController.setD(kD);
        // m_pidController.setIZone(kIz);
        // m_pidController.setFF(kFF);
        // m_pidController.setOutputRange(kMinOutput, kMaxOutput);

        motorControllerSpin1.set(speed);
    }

    public void stopMotor() {
        motorControllerSpin1.stopMotor();
    }

    public void setPositionGoal(double PGoal) {
        // Reset encoder (so test stand doesn't overrun)
        // m_encoder.setPosition(0.0);  // NEVER DO THIS!
        // Enable PID
        // PID coefficients
        kP = 0.0001; 
        kI = 0; //1e-4;
        kD = 0; //1; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 1; 
        kMinOutput = -1;

        // Smart Motion Coefficients
        maxVel = 50; // rpm
        maxAcc = 100000;
        minVel = 0;
        allowedErr = 0.1;

        // display PID coefficients on SmartDashboard
        SmartDashboard.putNumber("P Gain", kP);
        SmartDashboard.putNumber("I Gain", kI);
        SmartDashboard.putNumber("D Gain", kD);
        SmartDashboard.putNumber("I Zone", kIz);
        SmartDashboard.putNumber("Feed Forward", kFF);
        SmartDashboard.putNumber("Max Output", kMaxOutput);
        SmartDashboard.putNumber("Min Output", kMinOutput);
        SmartDashboard.putNumber("Set Rotations", 0);

        // set PID coefficients
        m_pidController.setP(kP);
        m_pidController.setI(kI);
        m_pidController.setD(kD);
        m_pidController.setIZone(kIz);
        m_pidController.setFF(kFF);
        m_pidController.setOutputRange(kMinOutput, kMaxOutput);

        // Set SmartMotion parameters
        m_pidController.setSmartMotionMaxVelocity(maxVel, 0);
        m_pidController.setSmartMotionMinOutputVelocity(minVel, 0);
        m_pidController.setSmartMotionMaxAccel(maxAcc, 0);
        m_pidController.setSmartMotionAllowedClosedLoopError(allowedErr, 0);
    
        /**
         * PIDController objects are commanded to a set point using the 
         * SetReference() method.
         * 
         * The first parameter is the value of the set point, whose units vary
         * depending on the control type set in the second parameter.
         * 
         * The second parameter is the control type can be set to one of four 
         * parameters:
         *  com.revrobotics.CANSparkMax.ControlType.kDutyCycle
         *  com.revrobotics.CANSparkMax.ControlType.kPosition
         *  com.revrobotics.CANSparkMax.ControlType.kVelocity
         *  com.revrobotics.CANSparkMax.ControlType.kVoltage
         */
        // m_pidController.setReference(PGoal, CANSparkMax.ControlType.kPosition);
        // SmartDashboard.putString("Mode", "Position");
        m_pidController.setReference(PGoal, CANSparkMax.ControlType.kSmartMotion);
        SmartDashboard.putString("Mode", "SmartPosition");
        SmartDashboard.putNumber("Setpoint", PGoal);
    }

    public void setVelocityGoal(double VGoal) {
        // Enable PID
        // PID coefficients
        kP = 0.0001; //1; //0.1; 
        kI = 0; //1e-4;
        kD = 0; //1; 
        kIz = 0; 
        kFF = 0; 
        kMaxOutput = 1; 
        kMinOutput = -1;

        // Smart Motion Coefficients
        maxVel = 5000; // rpm
        maxAcc = 100000;
        minVel = 0;
        allowedErr = 0.1;

        // display PID coefficients on SmartDashboard
        SmartDashboard.putNumber("P Gain", kP);
        SmartDashboard.putNumber("I Gain", kI);
        SmartDashboard.putNumber("D Gain", kD);
        SmartDashboard.putNumber("I Zone", kIz);
        SmartDashboard.putNumber("Feed Forward", kFF);
        SmartDashboard.putNumber("Max Output", kMaxOutput);
        SmartDashboard.putNumber("Min Output", kMinOutput);
        SmartDashboard.putNumber("Set Rotations", 0);

        // set PID coefficients
        m_pidController.setP(kP);
        m_pidController.setI(kI);
        m_pidController.setD(kD);
        m_pidController.setIZone(kIz);
        m_pidController.setFF(kFF);
        m_pidController.setOutputRange(kMinOutput, kMaxOutput);

        // Set SmartMotion parameters
        m_pidController.setSmartMotionMaxVelocity(maxVel, 0);
        m_pidController.setSmartMotionMinOutputVelocity(minVel, 0);
        m_pidController.setSmartMotionMaxAccel(maxAcc, 0);
        m_pidController.setSmartMotionAllowedClosedLoopError(allowedErr, 0);
    
        /**
         * PIDController objects are commanded to a set point using the 
         * SetReference() method.
         * 
         * The first parameter is the value of the set point, whose units vary
         * depending on the control type set in the second parameter.
         * 
         * The second parameter is the control type can be set to one of four 
         * parameters:
         *  com.revrobotics.CANSparkMax.ControlType.kDutyCycle
         *  com.revrobotics.CANSparkMax.ControlType.kPosition
         *  com.revrobotics.CANSparkMax.ControlType.kVelocity
         *  com.revrobotics.CANSparkMax.ControlType.kVoltage
         */
        // m_pidController.setReference(VGoal, CANSparkMax.ControlType.kVelocity);
        // SmartDashboard.putString("Mode", "Velocity");
        m_pidController.setReference(VGoal, CANSparkMax.ControlType.kSmartVelocity);
        SmartDashboard.putString("Mode", "Smart Velocity");
        SmartDashboard.putNumber("Setpoint", VGoal);
    }
    
}

